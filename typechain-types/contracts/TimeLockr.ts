/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface TimeLockrInterface extends utils.Interface {
  functions: {
    "FEE()": FunctionFragment;
    "MIN_LOCK_TIME_IN_SECONDS()": FunctionFragment;
    "addToWhitelist(address)": FunctionFragment;
    "getAllUnlockedMessages()": FunctionFragment;
    "getLockedMessages()": FunctionFragment;
    "lockMessage(address,string,uint256)": FunctionFragment;
    "messages(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeFromWhitelist(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlockMessage(bytes32)": FunctionFragment;
    "updateFee(uint256)": FunctionFragment;
    "updateMinimumLockTime(uint256)": FunctionFragment;
    "whitelist(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FEE"
      | "MIN_LOCK_TIME_IN_SECONDS"
      | "addToWhitelist"
      | "getAllUnlockedMessages"
      | "getLockedMessages"
      | "lockMessage"
      | "messages"
      | "owner"
      | "removeFromWhitelist"
      | "renounceOwnership"
      | "transferOwnership"
      | "unlockMessage"
      | "updateFee"
      | "updateMinimumLockTime"
      | "whitelist"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MIN_LOCK_TIME_IN_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addToWhitelist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllUnlockedMessages",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLockedMessages",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockMessage",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "messages",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeFromWhitelist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockMessage",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinimumLockTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIN_LOCK_TIME_IN_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllUnlockedMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockedMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "messages", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMinimumLockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;

  events: {
    "AddedToWhitelist(address,uint256)": EventFragment;
    "FeeUpdated(uint256,uint256,uint256)": EventFragment;
    "MessageLocked(address,bytes32,uint256)": EventFragment;
    "MessageUnlocked(address,uint256)": EventFragment;
    "MinimumLockUpTimeUpdated(uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemovedFromWhitelist(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedToWhitelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinimumLockUpTimeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedFromWhitelist"): EventFragment;
}

export interface AddedToWhitelistEventObject {
  user: string;
  timestamp: BigNumber;
}
export type AddedToWhitelistEvent = TypedEvent<
  [string, BigNumber],
  AddedToWhitelistEventObject
>;

export type AddedToWhitelistEventFilter =
  TypedEventFilter<AddedToWhitelistEvent>;

export interface FeeUpdatedEventObject {
  prevFee: BigNumber;
  fee: BigNumber;
  timestamp: BigNumber;
}
export type FeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  FeeUpdatedEventObject
>;

export type FeeUpdatedEventFilter = TypedEventFilter<FeeUpdatedEvent>;

export interface MessageLockedEventObject {
  user: string;
  messageId: string;
  timestamp: BigNumber;
}
export type MessageLockedEvent = TypedEvent<
  [string, string, BigNumber],
  MessageLockedEventObject
>;

export type MessageLockedEventFilter = TypedEventFilter<MessageLockedEvent>;

export interface MessageUnlockedEventObject {
  user: string;
  timestamp: BigNumber;
}
export type MessageUnlockedEvent = TypedEvent<
  [string, BigNumber],
  MessageUnlockedEventObject
>;

export type MessageUnlockedEventFilter = TypedEventFilter<MessageUnlockedEvent>;

export interface MinimumLockUpTimeUpdatedEventObject {
  prevLockTime: BigNumber;
  lockTime: BigNumber;
  timestamp: BigNumber;
}
export type MinimumLockUpTimeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  MinimumLockUpTimeUpdatedEventObject
>;

export type MinimumLockUpTimeUpdatedEventFilter =
  TypedEventFilter<MinimumLockUpTimeUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RemovedFromWhitelistEventObject {
  user: string;
  timestamp: BigNumber;
}
export type RemovedFromWhitelistEvent = TypedEvent<
  [string, BigNumber],
  RemovedFromWhitelistEventObject
>;

export type RemovedFromWhitelistEventFilter =
  TypedEventFilter<RemovedFromWhitelistEvent>;

export interface TimeLockr extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TimeLockrInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_LOCK_TIME_IN_SECONDS(overrides?: CallOverrides): Promise<[BigNumber]>;

    addToWhitelist(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllUnlockedMessages(
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    getLockedMessages(overrides?: CallOverrides): Promise<[string[]]>;

    lockMessage(
      _user: PromiseOrValue<string>,
      _message: PromiseOrValue<string>,
      _timeLocked: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    messages(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeFromWhitelist(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlockMessage(
      _messageId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateMinimumLockTime(
      _minimumLockTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_LOCK_TIME_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

  addToWhitelist(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllUnlockedMessages(
    overrides?: CallOverrides
  ): Promise<[string[], string[]]>;

  getLockedMessages(overrides?: CallOverrides): Promise<string[]>;

  lockMessage(
    _user: PromiseOrValue<string>,
    _message: PromiseOrValue<string>,
    _timeLocked: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  messages(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeFromWhitelist(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlockMessage(
    _messageId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateFee(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateMinimumLockTime(
    _minimumLockTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelist(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_LOCK_TIME_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    addToWhitelist(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllUnlockedMessages(
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    getLockedMessages(overrides?: CallOverrides): Promise<string[]>;

    lockMessage(
      _user: PromiseOrValue<string>,
      _message: PromiseOrValue<string>,
      _timeLocked: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    messages(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeFromWhitelist(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockMessage(
      _messageId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMinimumLockTime(
      _minimumLockTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AddedToWhitelist(address,uint256)"(
      user?: null,
      timestamp?: null
    ): AddedToWhitelistEventFilter;
    AddedToWhitelist(
      user?: null,
      timestamp?: null
    ): AddedToWhitelistEventFilter;

    "FeeUpdated(uint256,uint256,uint256)"(
      prevFee?: null,
      fee?: null,
      timestamp?: null
    ): FeeUpdatedEventFilter;
    FeeUpdated(
      prevFee?: null,
      fee?: null,
      timestamp?: null
    ): FeeUpdatedEventFilter;

    "MessageLocked(address,bytes32,uint256)"(
      user?: PromiseOrValue<string> | null,
      messageId?: null,
      timestamp?: null
    ): MessageLockedEventFilter;
    MessageLocked(
      user?: PromiseOrValue<string> | null,
      messageId?: null,
      timestamp?: null
    ): MessageLockedEventFilter;

    "MessageUnlocked(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      timestamp?: null
    ): MessageUnlockedEventFilter;
    MessageUnlocked(
      user?: PromiseOrValue<string> | null,
      timestamp?: null
    ): MessageUnlockedEventFilter;

    "MinimumLockUpTimeUpdated(uint256,uint256,uint256)"(
      prevLockTime?: null,
      lockTime?: null,
      timestamp?: null
    ): MinimumLockUpTimeUpdatedEventFilter;
    MinimumLockUpTimeUpdated(
      prevLockTime?: null,
      lockTime?: null,
      timestamp?: null
    ): MinimumLockUpTimeUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RemovedFromWhitelist(address,uint256)"(
      user?: null,
      timestamp?: null
    ): RemovedFromWhitelistEventFilter;
    RemovedFromWhitelist(
      user?: null,
      timestamp?: null
    ): RemovedFromWhitelistEventFilter;
  };

  estimateGas: {
    FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_LOCK_TIME_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    addToWhitelist(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllUnlockedMessages(overrides?: CallOverrides): Promise<BigNumber>;

    getLockedMessages(overrides?: CallOverrides): Promise<BigNumber>;

    lockMessage(
      _user: PromiseOrValue<string>,
      _message: PromiseOrValue<string>,
      _timeLocked: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    messages(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromWhitelist(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlockMessage(
      _messageId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateMinimumLockTime(
      _minimumLockTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_LOCK_TIME_IN_SECONDS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addToWhitelist(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllUnlockedMessages(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLockedMessages(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockMessage(
      _user: PromiseOrValue<string>,
      _message: PromiseOrValue<string>,
      _timeLocked: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    messages(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFromWhitelist(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlockMessage(
      _messageId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateMinimumLockTime(
      _minimumLockTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
